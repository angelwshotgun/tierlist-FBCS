// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // Thay tháº¿ cho providerType
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          String   @default("user")
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  TierList TierList[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model TierList {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  tiers       Tier[]
  items       Item[]
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Tier {
  id         String   @id @default(uuid())
  name       String
  order      Int
  color      String
  value      Int
  tierList   TierList @relation(fields: [tierListId], references: [id])
  tierListId String
  items      Item[]
}

model Item {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String?
  tier       Tier?    @relation(fields: [tierId], references: [id])
  tierId     String?
  tierList   TierList @relation(fields: [tierListId], references: [id])
  tierListId String
}